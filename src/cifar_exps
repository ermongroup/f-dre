----------------------
# DOMAIN ADAPTATION EXPS
(x-space baseline; resnet20)
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/domain_adapt/baseline.yaml  --exp_id da_cifar_baseline --ni --attr=class

(x-space dre baseline; resnet20)
1. first, train x-space classifier
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/domain_adapt/x_resnet.yaml  --exp_id da_x_dre_cifar --ni

2. next, train downstream classifier
CUDA_VISIBLE_DEVICES=1 python3 main.py --classify --config classification/domain_adapt/method_x.yaml  --exp_id da_x_cifar_classifier --ni --downstream

(z-dre method; MLP)
(a) (HACK: changed classifier.py -> old_classifier.py)
CUDA_VISIBLE_DEVICES=1 python3 main.py --classify --config classification/domain_adapt/z_mlp.yaml  --exp_id da_z_dre_cifar --ni --encode_z

CUDA_VISIBLE_DEVICES=1 python3 main.py --classify --config classification/domain_adapt/z_mlp.yaml  --exp_id da_z_dre_cifar_v3 --ni --encode_z

(b) downstream classifier in z-space
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/domain_adapt/method_z.yaml  --exp_id da_z_cifar_classifier --ni --downstream --encode_z




---
The thing that kinda worked: 87% > 86.2% > 84.2%
(baseline)
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/domain_adapt/baseline.yaml  --exp_id da_cifar_baseline_extreme --ni --attr=class

(x-space dre)
CUDA_VISIBLE_DEVICES=1 python3 main.py --classify --config classification/domain_adapt/method_x.yaml  --exp_id test --ni --downstream

(z-space dre)
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/domain_adapt/method_z.yaml  --exp_id da_z_cifar_classifier --ni --downstream --encode_z

---
More extreme?
(baseline)
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/domain_adapt/baseline.yaml  --exp_id da_cifar_baseline_extreme --ni --attr=class

(x-space dre baseline; resnet20)
1. first, train x-space classifier
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/domain_adapt/x_resnet.yaml  --exp_id da_x_dre_cifar_extreme --ni

2. next, train downstream classifier
CUDA_VISIBLE_DEVICES=1 python3 main.py --classify --config classification/domain_adapt/method_x.yaml  --exp_id da_x_cifar_classifier_extreme --ni --downstream


(z-dre method; MLP)
(a) (HACK: changed classifier.py -> old_classifier.py)
CUDA_VISIBLE_DEVICES=1 python3 main.py --classify --config classification/domain_adapt/z_mlp.yaml  --exp_id da_z_dre_cifar_extreme --ni --encode_z

(b) downstream classifier in z-space
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/domain_adapt/method_z.yaml  --exp_id da_z_cifar_classifier_extreme --ni --downstream --encode_z















----------------------
DDIM!
(DDIM Z-SPACE BASELINE)
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/cifar10_glow/z_ddim.yaml  --exp_id cifar_ddim_z --ni

# z-space resnet classifier
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/cifar10_glow/z_ddim_resnet.yaml  --exp_id cifar_ddim_z_resnet_deeper --ni

# z-space resnet classifier (shallow)
CUDA_VISIBLE_DEVICES=1 python3 main.py --classify --config classification/cifar10_glow/z_ddim_resnet_shallow.yaml  --exp_id cifar_ddim_z_resnet --ni

# z-space hybrid classifier
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/cifar10_glow/z_ddim_hybrid.yaml  --exp_id cifar_ddim_z_hybrid --ni

------
# can i train my attribute classifier for cifar10?
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/cifar10_glow/x_attr.yaml  --exp_id cifar_attributes --ni --attr=mammals

------
# DDIM X-SPACE BASELINE
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/cifar10_glow/x_ddim.yaml  --exp_id cifar_ddim_x --ni

----
# CLF with glow encodings
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/cifar10_glow/z_glow.yaml  --exp_id cifar_glow_z --ni






----------------------
OLD OLD OLD
----------------------
GLOW!
# CIFAR10
(Z-SPACE BASELINE)
CUDA_VISIBLE_DEVICES=1 python3 main.py --classify --config classification/cifar10_glow/z_glow.yaml  --exp_id cifar_glow_z --ni

(X-SPACE BASELINE)
CUDA_VISIBLE_DEVICES=0 python3 main.py --classify --config classification/cifar10_glow/x_glow.yaml  --exp_id cifar_glow_x --ni



OLD
------
(GLOW TRAINING?)
CUDA_VISIBLE_DEVICES=0 python3 glow.py --train --dataset=celeba --data_dir=/atlas/u/kechoi/fair_generative_modeling/data/celeba/--n_levels=3 --depth=32 --width=512 --batch_size=16